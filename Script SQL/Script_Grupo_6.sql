--Creación de Tablas:

CREATE TABLE TB_DIRECCION(
ID_DIRECCION NUMBER NOT NULL,
PROVINCIA VARCHAR2(20),
CANTON VARCHAR2(20),
DISTRITO VARCHAR2(20),
CONSTRAINT DIRECCION_PK PRIMARY KEY(ID_DIRECCION)
);


CREATE TABLE TB_CLIENTES(
ID_CLIENTE NUMBER NOT NULL,
NOMBRE_CLIENTE VARCHAR2(20),
PRIMER_APELLIDO_CLIENTE VARCHAR2(20),
SEGUNDO_APELLIDO_CLIENTE VARCHAR2(20),
TELEFONO_CLIENTE NUMBER(20),
CORREO_CLIENTE VARCHAR2(20),
FECHA_CREACION_CLIENTE DATE DEFAULT SYSDATE,
ID_DIRECCION NUMBER,
CONSTRAINT CLIENTES_PK PRIMARY KEY(ID_CLIENTE),
CONSTRAINT CLIENTES_FK FOREIGN KEY (ID_DIRECCION) REFERENCES TB_DIRECCION(ID_DIRECCION)
);


CREATE TABLE TB_ORDEN(
ID_ORDEN NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
ID_CLIENTE NUMBER(20),
FECHA_ORDEN DATE,
TIPO_PAGO VARCHAR2(20),
CONSTRAINT ORDEN_PK PRIMARY KEY (ID_ORDEN),
CONSTRAINT CLIENTE_ORDEN_FK FOREIGN KEY (ID_CLIENTE) REFERENCES TB_CLIENTES (ID_CLIENTE)
);

CREATE TABLE TB_PRODUCTO (
ID_PRODUCTO NUMBER NOT NULL,
NOMBRE_PRODUCTO VARCHAR2(20),
DESCRIPCION_PRODUCTO VARCHAR2(30),
PRECIO_PRODUCTO NUMBER(20),
CANTIDAD_PRODUCTO NUMBER(30),
CONSTRAINT ID_PRODUCTO_PK PRIMARY KEY (ID_PRODUCTO)
);

CREATE TABLE TB_DETALLE_ORDEN(
ID_DETALLE NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
ID_ORDEN NUMBER,
ID_PRODUCTO NUMBER,
CANTIDAD NUMBER(30),
TOTAL_PAGAR NUMBER (30),
CONSTRAINT DETALLE_ORDEN_PK PRIMARY KEY (ID_DETALLE),
CONSTRAINT ID_ORDEN_FK FOREIGN KEY (ID_ORDEN) REFERENCES TB_ORDEN (ID_ORDEN),
CONSTRAINT ID_PRODUCTO_FK FOREIGN KEY (ID_PRODUCTO) REFERENCES TB_PRODUCTO (ID_PRODUCTO)
);


CREATE TABLE TB_CONTACT(

ID_MSJ NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
NOMBRE VARCHAR2(20),
CORREO VARCHAR2(20),
TELEFONO NUMBER(20),
MENSAJE VARCHAR2(20),
FECHA DATE

);

ALTER TABLE TB_CONTACT
  ADD (
    CONSTRAINT TB_CONTACT_PK PRIMARY KEY (ID_MSJ)
);


--Tabla de Auditoria Para Clientes:

CREATE TABLE TB_AUDIT_EVENT_CLIENTE
( 
  ID_LOG number GENERATED BY DEFAULT ON NULL AS IDENTITY,
  REALIZADO_POR VARCHAR2(20),
  ACCION VARCHAR2(20),
  FECHA DATE
);

ALTER TABLE TB_AUDIT_EVENT_CLIENTE
  ADD (
    CONSTRAINT TB_AUDIT_EVENT_CLIENTE PRIMARY KEY (ID_LOG)
  );

--Store Procedures.
--Procedimiento para insertar clientes:

CREATE OR REPLACE PROCEDURE INSERTARCLIENTE(
	ID_CLI IN TB_CLIENTES.ID_CLIENTE%TYPE,
	NOM_CLIENTE IN TB_CLIENTES.NOMBRE_CLIENTE%TYPE,
	PR_APELLIDO IN TB_CLIENTES.PRIMER_APELLIDO_CLIENTE%TYPE,
	SEG_APELLIDO IN TB_CLIENTES.SEGUNDO_APELLIDO_CLIENTE%TYPE,
	TELEFONO IN TB_CLIENTES.TELEFONO_CLIENTE%TYPE,
	CORREO IN TB_CLIENTES.CORREO_CLIENTE%TYPE,
	FECHA IN TB_CLIENTES.FECHA_CREACION_CLIENTE%TYPE
)IS
BEGIN 
	INSERT INTO TB_CLIENTES (ID_CLIENTE, NOMBRE_CLIENTE, PRIMER_APELLIDO_CLIENTE, SEGUNDO_APELLIDO_CLIENTE, TELEFONO_CLIENTE, CORREO_CLIENTE, FECHA_CREACION_CLIENTE)  
    VALUES (ID_CLI, NOM_CLIENTE, PR_APELLIDO, SEG_APELLIDO, TELEFONO, CORREO, SYSDATE);
END INSERTARCLIENTE;


--Llamar procedimiento INSERTARCLIENTE:


EXECUTE INSERTARCLIENTE(121212634454,'Luis','Quiros','Ramirez',22897656,'luquitas34@outlook.com',SYSDATE);



--Procedimiento para insertar direcciones:

CREATE OR REPLACE PROCEDURE INSERTARDIRECCION(
  ID_DIR IN TB_DIRECCION.ID_DIRECCION%TYPE,
  PROV IN TB_DIRECCION.PROVINCIA%TYPE,
  CANT IN TB_DIRECCION.CANTON%TYPE,
  DIST IN TB_DIRECCION.DISTRITO%TYPE
)IS
BEGIN 
  INSERT INTO TB_DIRECCION (ID_DIRECCION, PROVINCIA, CANTON, DISTRITO)  
    VALUES (ID_DIR, PROV, CANT, DIST);
END INSERTARDIRECCION;

--Llamar procedimiento INSERTARDIRECCION:


EXECUTE INSERTARDIRECCION(89,'San Jose','Desamparados','San Rafael Arriba');



--Procedimiento para insertar Productos en la tabla TB_Producto:

CREATE OR REPLACE PROCEDURE INSERTAR_PRODUCTO (ID_PRO NUMBER, NOMBRE VARCHAR2, DESCRIPCION VARCHAR2, PRECIO NUMBER, CANTIDAD NUMBER)
AS
BEGIN
       INSERT INTO TB_PRODUCTO(ID_PRODUCTO, NOMBRE_PRODUCTO, DESCRIPCION_PRODUCTO, PRECIO_PRODUCTO, CANTIDAD_PRODUCTO) 
       VALUES (ID_PRO, NOMBRE, DESCRIPCION, PRECIO, CANTIDAD);
END;

--Ejecutar procedimiento INSERTAR_PRODUCTO:

EXECUTE INSERTAR_PRODUCTO('12', 'Pulseras', 'Arbol azul con gris', '4000', '8');



--Procedimiento con cursor de la Tabla Auditoria TB_AUDIT_EVENT_CLIENTE:

CREATE OR REPLACE PROCEDURE AUDITORIA (MI_CURSOR OUT SYS_REFCURSOR)
AS
BEGIN
       OPEN MI_CURSOR FOR SELECT * FROM TB_AUDIT_EVENT_CLIENTE;
END;


VAR MI_CURSOR REFCURSOR;
EXECUTE AUDITORIA(:MI_CURSOR);
PRINT MI_CURSOR



--Triggers:
--Secuencia para el Trigger y Tabla Auditoria:

CREATE SEQUENCE id_log_seq
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1
    MAXVALUE 9999999999999
    NOCYCLE
    CACHE 2;


--Trigger para Actualizar ID de Cambio en TB_AUDIT_EVENT_CLIENTE:

CREATE OR REPLACE TRIGGER CHANGE_LOG_ID
	BEFORE INSERT ON TB_AUDIT_EVENT_CLIENTE
  		FOR EACH ROW

BEGIN
  SELECT id_log_seq.nextval
  INTO :new.ID_LOG
  FROM dual;
END;


--Trigger para Cambios en Cliente:

CREATE OR REPLACE TRIGGER CHANGE_ON_CLIENTES
  AFTER INSERT OR UPDATE OR DELETE ON TB_CLIENTES

DECLARE
	ACC TB_AUDIT_EVENT_CLIENTE.ACCION%TYPE;


BEGIN
	IF INSERTING THEN
		ACC := 'Cliente INSERTADO';
		

	ELSIF UPDATING THEN
		ACC := 'Cliente MODIFICADO';
		
	ELSIF DELETING THEN
		ACC := 'Cliente ELIMINADO';
		
	ELSE 
		DBMS_OUTPUT.PUT_LINE('El código no es alcanzable.');
	END IF;

  INSERT INTO TB_AUDIT_EVENT_CLIENTE (REALIZADO_POR, ACCION,FECHA) VALUES (user,ACC,SYSDATE);
END;

--Secuencia para el Trigger y Tabla TB_CONTACT:

CREATE SEQUENCE ID_MSJ_SEQ
    INCREMENT BY 1
    START WITH 100
    MINVALUE 100
    MAXVALUE 9999999999999
    NOCYCLE
    CACHE 2;

--Trigger para Actualizar ID de MSJ en TB_CONTACT:

CREATE OR REPLACE TRIGGER CHANGE_MSJ_ID
  BEFORE INSERT ON TB_CONTACT
      FOR EACH ROW

BEGIN
  SELECT ID_MSJ_SEQ.nextval
  INTO :new.ID_MSJ
  FROM dual;
END;

--Secuencia para el Trigger y Tabla TB_DETALLE_ORDEN:

CREATE SEQUENCE ID_DET_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1
    MAXVALUE 9999999999999
    NOCYCLE
    CACHE 2;


--Trigger para actualizar ID_DETALLE en TB_DETALLE_ORDEN:


CREATE OR REPLACE TRIGGER CHANGE_ID_DET
  BEFORE INSERT ON TB_DETALLE_ORDEN
      FOR EACH ROW

BEGIN
  SELECT ID_DET_SEQ.nextval
  INTO :new.ID_DETALLE
  FROM dual;
END;


--Secuencia para el Trigger y Tabla TB_ORDEN:

CREATE SEQUENCE ID_ORD_SEQ
    INCREMENT BY 1
    START WITH 1
    MINVALUE 1
    MAXVALUE 9999999999999
    NOCYCLE
    CACHE 2;


--Trigger para actualizar ID_DETALLE en TB_ORDEN:


CREATE OR REPLACE TRIGGER CHANGE_ID_ORD
  BEFORE INSERT ON TB_ORDEN
      FOR EACH ROW

BEGIN
  SELECT ID_ORD_SEQ.nextval
  INTO :new.ID_ORDEN
  FROM dual;
END;


--Inserts a la Tabla TB_CLIENTES:

INSERT INTO TB_CLIENTES(ID_CLIENTE, NOMBRE_CLIENTE, PRIMER_APELLIDO_CLIENTE, SEGUNDO_APELLIDO_CLIENTE, TELEFONO_CLIENTE,
CORREO_CLIENTE, FECHA_CREACION_CLIENTE) VALUES(115010971,'Josue','Inces','Cascante',88888888,'josue@mail.com',SYSDATE);

INSERT INTO TB_CLIENTES(ID_CLIENTE, NOMBRE_CLIENTE, PRIMER_APELLIDO_CLIENTE, SEGUNDO_APELLIDO_CLIENTE, TELEFONO_CLIENTE,
CORREO_CLIENTE, FECHA_CREACION_CLIENTE)  VALUES(1148726,'Randy','Lopez','Carpio',22503016,'raralo@gmail.com',SYSDATE);

INSERT INTO TB_CLIENTES(ID_CLIENTE, NOMBRE_CLIENTE, PRIMER_APELLIDO_CLIENTE, SEGUNDO_APELLIDO_CLIENTE, TELEFONO_CLIENTE,
CORREO_CLIENTE, FECHA_CREACION_CLIENTE)  VALUES(11489054,'Juan','Chavarria','Castro',72067834,'juancapro@gmail.com',SYSDATE);

INSERT INTO TB_CLIENTES(ID_CLIENTE, NOMBRE_CLIENTE, PRIMER_APELLIDO_CLIENTE, SEGUNDO_APELLIDO_CLIENTE, TELEFONO_CLIENTE,
CORREO_CLIENTE, FECHA_CREACION_CLIENTE)  VALUES(1147802,'Dennis','Obrero','Lindor',72067753,'lindord@gmail.com',SYSDATE);

INSERT INTO TB_CLIENTES(ID_CLIENTE, NOMBRE_CLIENTE, PRIMER_APELLIDO_CLIENTE, SEGUNDO_APELLIDO_CLIENTE, TELEFONO_CLIENTE,
CORREO_CLIENTE, FECHA_CREACION_CLIENTE)  VALUES(1156202,'Vilma','Carvallo','Reese',73068853,'reeselu@gmail.com',SYSDATE);

INSERT INTO TB_CLIENTES(ID_CLIENTE, NOMBRE_CLIENTE, PRIMER_APELLIDO_CLIENTE, SEGUNDO_APELLIDO_CLIENTE, TELEFONO_CLIENTE,
CORREO_CLIENTE, FECHA_CREACION_CLIENTE)  VALUES(1133302,'Ruben','Maroto','Rojas',79368854,'marube@gmail.com', SYSDATE);

INSERT INTO TB_CLIENTES(ID_CLIENTE, NOMBRE_CLIENTE, PRIMER_APELLIDO_CLIENTE, SEGUNDO_APELLIDO_CLIENTE, TELEFONO_CLIENTE,
CORREO_CLIENTE, FECHA_CREACION_CLIENTE)  VALUES(12354302,'Alonso','Martinez','Brown',71368236,'brobro@gmail.com',SYSDATE);

INSERT INTO TB_CLIENTES(ID_CLIENTE, NOMBRE_CLIENTE, PRIMER_APELLIDO_CLIENTE, SEGUNDO_APELLIDO_CLIENTE, TELEFONO_CLIENTE,
CORREO_CLIENTE, FECHA_CREACION_CLIENTE)  VALUES(52356589,'Yorlenny','Zapata','Lino',613782336,'yoyozalino@gmail.com'SYSDATE);

INSERT INTO TB_CLIENTES(ID_CLIENTE, NOMBRE_CLIENTE, PRIMER_APELLIDO_CLIENTE, SEGUNDO_APELLIDO_CLIENTE, TELEFONO_CLIENTE,
CORREO_CLIENTE, FECHA_CREACION_CLIENTE) VALUES(11324543,'Josefo','Ramirez','Costa',88738943,'sefolan@mail.com',SYSDATE);

INSERT INTO TB_CLIENTES (ID_CLIENTE, NOMBRE_CLIENTE, PRIMER_APELLIDO_CLIENTE, SEGUNDO_APELLIDO_CLIENTE, TELEFONO_CLIENTE,
CORREO_CLIENTE, FECHA_CREACION_CLIENTE) VALUES(1112326,'Randall','Lascares','Carpio',22509876,'lascara@gmail.com',SYSDATE);

INSERT INTO TB_CLIENTES(ID_CLIENTE, NOMBRE_CLIENTE, PRIMER_APELLIDO_CLIENTE, SEGUNDO_APELLIDO_CLIENTE, TELEFONO_CLIENTE,
CORREO_CLIENTE, FECHA_CREACION_CLIENTE) VALUES(2134546,'Nathaniel','Testown','Lee',72067753,'teslee@gmail.com',SYSDATE);




--Inserts a la Tabla TB_DIRECCION:


INSERT INTO TB_DIRECCION(ID_DIRECCION,PROVINCIA,CANTON,DISTRITO) VALUES(10,'San Jose','Desamparados','Damas');

INSERT INTO TB_DIRECCION(ID_DIRECCION,PROVINCIA,CANTON,DISTRITO) VALUES(15,'Cartago','Alvarado','Capellades');

INSERT INTO TB_DIRECCION(ID_DIRECCION,PROVINCIA,CANTON,DISTRITO) VALUES(7,'Heredia','Belen','San Antonio');

INSERT INTO TB_DIRECCION(ID_DIRECCION,PROVINCIA,CANTON,DISTRITO) VALUES(8,'Heredia','Belen','La Ribera');

INSERT INTO TB_DIRECCION(ID_DIRECCION,PROVINCIA,CANTON,DISTRITO) VALUES(4,'Alajuela','Atenas','Concepción');

INSERT INTO TB_DIRECCION(ID_DIRECCION,PROVINCIA,CANTON,DISTRITO) VALUES(6,'Alajuela','Grecia','Bolivar');

INSERT INTO TB_DIRECCION(ID_DIRECCION,PROVINCIA,CANTON,DISTRITO) VALUES(9,'Alajuela','Naranjo','Palmitos');

INSERT INTO TB_DIRECCION(ID_DIRECCION,PROVINCIA,CANTON,DISTRITO) VALUES(22,'Cartago','Oreamuno','San Rafael');

INSERT INTO TB_DIRECCION(ID_DIRECCION,PROVINCIA,CANTON,DISTRITO) VALUES(17,'San Jose','Alajuelita','San Felipe');

INSERT INTO TB_DIRECCION(ID_DIRECCION,PROVINCIA,CANTON,DISTRITO) VALUES(24,'San Jose','Curridabat','Granadilla');

INSERT INTO TB_DIRECCION(ID_DIRECCION,PROVINCIA,CANTON,DISTRITO) VALUES(88,'San Jose','Escazú','San Rafael');

--Inserts en la Tabla TB_PRODUCTO:


INSERT INTO TB_PRODUCTO(ID_PRODUCTO,NOMBRE_PRODUCTO,DESCRIPCION_PRODUCTO,PRECIO_PRODUCTO,CANTIDAD_PRODUCTO) VALUES(25,'Serum','Potenciador Cejas',4000,18);

INSERT INTO TB_PRODUCTO(ID_PRODUCTO,NOMBRE_PRODUCTO,DESCRIPCION_PRODUCTO,PRECIO_PRODUCTO,CANTIDAD_PRODUCTO) VALUES(77,'Jabones','Jabones cuidado Piel',2000,20);

INSERT INTO TB_PRODUCTO(ID_PRODUCTO,NOMBRE_PRODUCTO,DESCRIPCION_PRODUCTO,PRECIO_PRODUCTO,CANTIDAD_PRODUCTO) VALUES(45,'Pulseras','Especial Día de la Madre',5000,14);

INSERT INTO TB_PRODUCTO(ID_PRODUCTO,NOMBRE_PRODUCTO,DESCRIPCION_PRODUCTO,PRECIO_PRODUCTO,CANTIDAD_PRODUCTO) VALUES(40,'Aretes','Colgante con dije',3000,16);

INSERT INTO TB_PRODUCTO(ID_PRODUCTO,NOMBRE_PRODUCTO,DESCRIPCION_PRODUCTO,PRECIO_PRODUCTO,CANTIDAD_PRODUCTO) VALUES(34,'Aceite','Aceite para masajes',5000,12);

INSERT INTO TB_PRODUCTO(ID_PRODUCTO,NOMBRE_PRODUCTO,DESCRIPCION_PRODUCTO,PRECIO_PRODUCTO,CANTIDAD_PRODUCTO) VALUES(28,'Aceite','Aceite esencial LAVANDA',5000,12);

INSERT INTO TB_PRODUCTO(ID_PRODUCTO,NOMBRE_PRODUCTO,DESCRIPCION_PRODUCTO,PRECIO_PRODUCTO,CANTIDAD_PRODUCTO) VALUES(26,'Aceite','Aceite esencial ROMERO',5000,8);

INSERT INTO TB_PRODUCTO(ID_PRODUCTO,NOMBRE_PRODUCTO,DESCRIPCION_PRODUCTO,PRECIO_PRODUCTO,CANTIDAD_PRODUCTO) VALUES(62,'Aretes','Flores Plateado',4000,15);

INSERT INTO TB_PRODUCTO(ID_PRODUCTO,NOMBRE_PRODUCTO,DESCRIPCION_PRODUCTO,PRECIO_PRODUCTO,CANTIDAD_PRODUCTO) VALUES(38,'Loción','Humectante para piel COCO',5500,10);

INSERT INTO TB_PRODUCTO(ID_PRODUCTO,NOMBRE_PRODUCTO,DESCRIPCION_PRODUCTO,PRECIO_PRODUCTO,CANTIDAD_PRODUCTO) VALUES(42,'Loción','Humectante para cara SABILA',6000,10);

INSERT INTO TB_PRODUCTO(ID_PRODUCTO,NOMBRE_PRODUCTO,DESCRIPCION_PRODUCTO,PRECIO_PRODUCTO,CANTIDAD_PRODUCTO) VALUES(59,'Shampoo','Cabello Fuerte ALOE',5000,15);

INSERT INTO TB_PRODUCTO(ID_PRODUCTO,NOMBRE_PRODUCTO,DESCRIPCION_PRODUCTO,PRECIO_PRODUCTO,CANTIDAD_PRODUCTO) VALUES(10,'Pulseras','Arbol blanca con verde',4000,5);

--Inserts en la Tabla TB_ORDEN:


INSERT INTO TB_ORDEN VALUES(ID_ORD_SEQ.nextval,115010971, SYSDATE, 'Efectivo');

INSERT INTO TB_ORDEN VALUES(ID_ORD_SEQ.nextval,1148726, SYSDATE, 'Depósito');

INSERT INTO TB_ORDEN VALUES(ID_ORD_SEQ.nextval,11489054, SYSDATE, 'Efectivo');

INSERT INTO TB_ORDEN VALUES(ID_ORD_SEQ.nextval,1147802, SYSDATE, 'Efectivo');

INSERT INTO TB_ORDEN VALUES(ID_ORD_SEQ.nextval,1156202, SYSDATE, 'Depósito');

INSERT INTO TB_ORDEN VALUES(ID_ORD_SEQ.nextval,1133302, SYSDATE, 'Efectivo');

INSERT INTO TB_ORDEN VALUES(ID_ORD_SEQ.nextval,12354302, SYSDATE, 'Efectivo');

INSERT INTO TB_ORDEN VALUES(ID_ORD_SEQ.nextval,52356589, SYSDATE, 'Depósito');

INSERT INTO TB_ORDEN VALUES(ID_ORD_SEQ.nextval,11324543, SYSDATE, 'Efectivo');

INSERT INTO TB_ORDEN VALUES(ID_ORD_SEQ.nextval,1112326, SYSDATE, 'Depósito');

--Inserts en la Tabla TB_DETALLE_ORDEN:


INSERT INTO TB_DETALLE_ORDEN VALUES(ID_DET_SEQ.nextval,101,25,2,8000);

INSERT INTO TB_DETALLE_ORDEN VALUES(ID_DET_SEQ.nextval,103,77,3,6000);

INSERT INTO TB_DETALLE_ORDEN VALUES(ID_DET_SEQ.nextval,105,45,2,10000);

INSERT INTO TB_DETALLE_ORDEN VALUES(ID_DET_SEQ.nextval,107,26,1,5000);

INSERT INTO TB_DETALLE_ORDEN VALUES(ID_DET_SEQ.nextval,109,34,4,20000);

INSERT INTO TB_DETALLE_ORDEN VALUES(ID_DET_SEQ.nextval,111,64,2,8000);

INSERT INTO TB_DETALLE_ORDEN VALUES(ID_DET_SEQ.nextval,113,77,1,2000);

INSERT INTO TB_DETALLE_ORDEN VALUES(ID_DET_SEQ.nextval,115,42,2,12000);

INSERT INTO TB_DETALLE_ORDEN VALUES(ID_DET_SEQ.nextval,117,25,1,4000);

INSERT INTO TB_DETALLE_ORDEN VALUES(ID_DET_SEQ.nextval,119,59,5,25000);



--Funciones:

--Cursor dentro de una función que muestra la información de las ordenes y el codigo de producto cuyo total esta dentro de un 
--rango de 2000 y 6000 colones. Este imprime el resultado en un bloque anónimo.


CREATE OR REPLACE FUNCTION ORD_PAGAR
RETURN SYS_REFCURSOR
IS
ORDENES SYS_REFCURSOR;
BEGIN
OPEN ORDENES FOR
SELECT ID_ORDEN AS Orden, ID_PRODUCTO AS Producto, TOTAL_PAGAR AS Total
FROM TB_DETALLE_ORDEN
WHERE TOTAL_PAGAR BETWEEN 2000 AND 6000;

RETURN ORDENES;
END;


DECLARE
    ORDENES SYS_REFCURSOR;
BEGIN
    ORDENES := ORD_PAGAR;
    DBMS_SQL.RETURN_RESULT(ORDENES);
END;


--Funcion que retorna en formato XML todas las ordenes con su ID de Cliente, ID de orden y Total que fueron pagadas por el metodo de pago definido.

CREATE OR REPLACE FUNCTION ORDENES_POR_METODOPAGO(PAGO VARCHAR2)
RETURN SYS_REFCURSOR
IS
ORDENES SYS_REFCURSOR;
BEGIN
OPEN ORDENES FOR
SELECT TBO.ID_CLIENTE AS ID_Cliente, TBO.ID_ORDEN AS Orden, TBO.TIPO_PAGO AS Metodo_Pago, TBD.TOTAL_PAGAR AS Total
FROM TB_ORDEN TBO
INNER JOIN TB_DETALLE_ORDEN  TBD
ON TBO.ID_ORDEN = TBD.ID_ORDEN
WHERE  TBO.TIPO_PAGO = PAGO;

RETURN ORDENES;
END;


DECLARE
    BOLSAS XMLTYPE;
BEGIN
    BOLSAS:=XMLTYPE(ORDENES_POR_METODOPAGO('Efectivo'));
    DBMS_OUTPUT.PUT_LINE(BOLSAS.GETCLOBVAL());
END;


--Vistas:

--Vista que muestra las ordenes realizadas por los clientes así como Nombre, Apellido1, Apellido2, ID de orden y Fecha de orden con ALias:

CREATE OR REPLACE VIEW vistaOrdenCliente AS
SELECT NOMBRE_CLIENTE AS Nombre, PRIMER_APELLIDO_CLIENTE AS Apellido1, SEGUNDO_APELLIDO_CLIENTE AS Apellido2, 
        ID_ORDEN AS ORDEN, FECHA_ORDEN AS FECHA FROM TB_CLIENTES
        INNER JOIN TB_ORDEN
        ON TB_CLIENTES.ID_CLIENTE = TB_ORDEN.ID_CLIENTE;


--Llamar o ejecutar esta vista:

--SELECT * FROM vistaOrdenCliente;   

--Paquetes:

--Paquete que contiene un procedimiento almacenado que recibe un nombre de producto y este devuelve todas las descripciones
--de los productos con ese nombre.

CREATE OR REPLACE PACKAGE PAQ_PRODUCTO
IS
  PROCEDURE DESC_POR_NOM (DESCRIPCION OUT SYS_REFCURSOR, NOMBRE IN VARCHAR2);
END;
/
CREATE OR REPLACE PACKAGE BODY PAQ_PRODUCTO
IS
PROCEDURE DESC_POR_NOM (DESCRIPCION OUT SYS_REFCURSOR, NOMBRE IN VARCHAR2)
AS
    BEGIN
         OPEN DESCRIPCION FOR SELECT DESCRIPCION_PRODUCTO FROM TB_PRODUCTO WHERE NOMBRE_PRODUCTO = NOMBRE;
    END;
END;


--Llamar procedimiento de este paquete:

SET SERVEROUTPUT ON;

VAR DESCRIPCION REFCURSOR;
EXECUTE PAQ_PRODUCTO.DESC_POR_NOM(:DESCRIPCION,'Pulseras');
PRINT DESCRIPCION;


--Paquete para Insertar o Eliminar Clientes de TB_CLIENTES:

CREATE OR REPLACE PACKAGE PAQ_CLIENTES AS 
   -- Agrega un Cliente 
   PROCEDURE addCLIENTE(C_ID TB_CLIENTES.ID_CLIENTE%TYPE, 
   C_NOMBRE TB_CLIENTES.NOMBRE_CLIENTE%TYPE, 
   C_PAPELLIDO  TB_CLIENTES.PRIMER_APELLIDO_CLIENTE%TYPE, 
   C_SAPELLIDO TB_CLIENTES.SEGUNDO_APELLIDO_CLIENTE%TYPE,
   C_TELEFONO_CLIENTE TB_CLIENTES.TELEFONO_CLIENTE%TYPE,
   C_CORREO TB_CLIENTES.CORREO_CLIENTE%TYPE); 
   
   -- Remueve un Cliente
   PROCEDURE delCLIENTE(C_ID TB_CLIENTES.ID_CLIENTE%TYPE); 
  
END PAQ_CLIENTES; 
/
CREATE OR REPLACE PACKAGE BODY PAQ_CLIENTES AS 
   PROCEDURE addCLIENTE(
   C_ID TB_CLIENTES.ID_CLIENTE%TYPE, 
   C_NOMBRE TB_CLIENTES.NOMBRE_CLIENTE%TYPE, 
   C_PAPELLIDO  TB_CLIENTES.PRIMER_APELLIDO_CLIENTE%TYPE, 
   C_SAPELLIDO TB_CLIENTES.SEGUNDO_APELLIDO_CLIENTE%TYPE,
   C_TELEFONO_CLIENTE TB_CLIENTES.TELEFONO_CLIENTE%TYPE,
   C_CORREO TB_CLIENTES.CORREO_CLIENTE%TYPE)
   IS 
   BEGIN 
      INSERT INTO TB_CLIENTES (ID_CLIENTE,NOMBRE_CLIENTE,PRIMER_APELLIDO_CLIENTE,SEGUNDO_APELLIDO_CLIENTE,TELEFONO_CLIENTE,CORREO_CLIENTE,FECHA_CREACION_CLIENTE) 
         VALUES(C_ID,C_NOMBRE,C_PAPELLIDO,C_SAPELLIDO,C_TELEFONO_CLIENTE,C_CORREO,SYSDATE); 
   END addCLIENTE; 
   
   PROCEDURE delCLIENTE(C_ID TB_CLIENTES.ID_CLIENTE%TYPE) IS 
   BEGIN 
      DELETE FROM TB_CLIENTES
      WHERE ID_CLIENTE = C_ID; 
   END delCLIENTE;  
END PAQ_CLIENTES; 
/

--Llamar al procedimiento dentro del paquete:

execute PAQ_CLIENTES.addCLIENTE(11489238,'Juan','Moreno','Tencio',72467867,'johndark@gmail.com');


--Paquete que contiene la funcion de contar cuantos clientes hay en la provincia que indiquemos:

CREATE OR REPLACE PACKAGE PKG_PERSONAS_PROVINCIA
IS
  PROCEDURE CLIENTES_POR_PROVINCIA (CANTIDAD_PERSONAS OUT SYS_REFCURSOR, PROVINCIAA IN VARCHAR2);
  FUNCTION CLIENTES_POR_PROVINCIA_FUN(PROVINCIAA VARCHAR2) RETURN NUMBER;
END;
/
CREATE OR REPLACE PACKAGE BODY PKG_PERSONAS_PROVINCIA
IS
PROCEDURE CLIENTES_POR_PROVINCIA (CANTIDAD_PERSONAS OUT SYS_REFCURSOR, PROVINCIAA IN VARCHAR2)
AS
    BEGIN
         OPEN CANTIDAD_PERSONAS FOR SELECT COUNT(TB_CLIENTES.NOMBRE_CLIENTE)
         FROM TB_CLIENTES
         INNER JOIN TB_DIRECCION
         ON  TB_DIRECCION.ID_DIRECCION = TB_CLIENTES.ID_DIRECCION
         WHERE PROVINCIA = PROVINCIAA;
    END;
    
    FUNCTION CLIENTES_POR_PROVINCIA_FUN(PROVINCIAA VARCHAR2) -- SE EJECUTA DENTRO DEL PAQUETE LA FUNCION
  RETURN NUMBER
  IS
  CANTIDAD_PERSONAS NUMBER;
   BEGIN
    SELECT COUNT(NOMBRE_CLIENTE) INTO CANTIDAD_PERSONAS FROM TB_CLIENTES
         INNER JOIN TB_DIRECCION
         ON  TB_DIRECCION.ID_DIRECCION = TB_CLIENTES.ID_DIRECCION
         WHERE PROVINCIA = PROVINCIAA;
    RETURN CANTIDAD_PERSONAS;
END; 
END;



VAR CANTIDAD_PERSONAS REFCURSOR;
EXECUTE PKG_PERSONAS_PROVINCIA.CLIENTES_POR_PROVINCIA(:CANTIDAD_PERSONAS,'Cartago');
PRINT CANTIDAD_PERSONAS;



--Vista de todos los productos:

CREATE VIEW TODOS_PRODUCTOS AS 
SELECT NOMBRE_PRODUCTO, DESCRIPCION_PRODUCTO, PRECIO_PRODUCTO
FROM TB_PRODUCTO;

--llamar o ejecutar esta vista:

SELECT * FROM  TODOS_PRODUCTOS;

--Vista de todos los productos por precio de menor a mayor:

CREATE VIEW PRECIO_MENOR_MAYOR AS
SELECT NOMBRE_PRODUCTO, DESCRIPCION_PRODUCTO, PRECIO_PRODUCTO
FROM TB_PRODUCTO
ORDER BY PRECIO_PRODUCTO ASC;

--llamar o ejecutar esta vista:

SELECT * FROM  PRECIO_MENOR_MAYOR;


--Vista de todos los productos por precio de mayor a menor:


CREATE VIEW PRECIO_MAYOR_MENOR AS
SELECT NOMBRE_PRODUCTO, DESCRIPCION_PRODUCTO, PRECIO_PRODUCTO
FROM TB_PRODUCTO
ORDER BY PRECIO_PRODUCTO DESC;


--llamar o ejecutar esta vista:

SELECT * FROM  PRECIO_MAYOR_MENOR;





